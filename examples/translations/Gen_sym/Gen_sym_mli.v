(* Set Implicit Arguments. *)

(* Require Import gospelstdlib_verified. *)

(* Require Coq.ZArith.BinInt TLC.LibLogic TLC.LibRelation TLC.LibInt TLC.LibListZ. *)

(* Require Import CFML.SepBase CFML.SepLifted CFML.WPLib CFML.WPLifted CFML.WPRecord CFML.WPArray CFML.WPBuiltin. *)

(* Require CFML.Stdlib.Array_ml CFML.Stdlib.List_ml CFML.Stdlib.Sys_ml. *)

(* Require Import Coq.ZArith.BinIntDef CFML.Semantics CFML.WPHeader. *)

(* Delimit Scope Z_scope with Z. *)

(* Parameter nam : Type. *)

(* Parameter Nam : *)
(*   name -> nam -> CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hprop. *)

(* Parameter T : *)
(*   Sett name -> loc -> CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hprop. *)

(* Parameter _create : CFML.Semantics.val. *)

(* Parameter _create_spec : *)
(*   forall {a : Type}, *)
(*   forall {Ih_a : Inhab a}, *)
(*   forall {Enc_a : Enc a}, *)
(*   CFML.SepLifted.Triple ( *)
(*     CFML.SepLifted.Trm_apps _create Coq.Lists.List.nil *)
(*   ) CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hempty ( *)
(*     fun _res_ : Sett name => *)
(*     let '(g) := _res_ in *)
(*     CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hpure ( *)
(*       @infix = (set name) a g Setempty *)
(*     ) *)
(*   ). *)

(* Parameter _next : CFML.Semantics.val. *)

(* Parameter _next_spec : *)
(*   forall {c : Type}, *)
(*   forall {a : Type}, *)
(*   forall {b : Type}, *)
(*   forall {Ih_c : Inhab c}, *)
(*   forall {Enc_c : Enc c}, *)
(*   forall {Ih_a : Inhab a}, *)
(*   forall {Enc_a : Enc a}, *)
(*   forall {Ih_b : Inhab b}, *)
(*   forall {Enc_b : Enc b}, *)
(*   forall g : Sett name, *)
(*   CFML.SepLifted.Triple ( *)
(*     CFML.SepLifted.Trm_apps _next ( *)
(*       Coq.Lists.List.cons (@CFML.SepLifted.dyn_make (Sett name) _ g) Coq.Lists.List.nil *)
(*     ) *)
(*   ) CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hempty ( *)
(*     fun _res_ : name => *)
(*     let '(n) := _res_ in *)
(*     CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hstar ( *)
(*       CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hpure ( *)
(*         @Setmem name c n g *)
(*       ) *)
(*     ) ( *)
(*       CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hstar ( *)
(*         CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hpure ( *)
(*           not (@Setmem name b n g) *)
(*         ) *)
(*       ) ( *)
(*         CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hpure ( *)
(*           @Setsubset name a g g *)
(*         ) *)
(*       ) *)
(*     ) *)
(*   ). *)

(* Parameter _reset : CFML.Semantics.val. *)

(* Parameter _reset_spec : *)
(*   forall {a : Type}, *)
(*   forall {Ih_a : Inhab a}, *)
(*   forall {Enc_a : Enc a}, *)
(*   forall g : Sett name, *)
(*   CFML.SepLifted.Triple ( *)
(*     CFML.SepLifted.Trm_apps _reset ( *)
(*       Coq.Lists.List.cons (@CFML.SepLifted.dyn_make (Sett name) _ g) Coq.Lists.List.nil *)
(*     ) *)
(*   ) CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hempty ( *)
(*     fun _res_ : Coq.Init.Datatypes.unit => *)
(*     CFML.SepBase.SepBasicSetup.SepSimplArgsCredits.hpure ( *)
(*       @infix = (set name) a g Setempty *)
(*     ) *)
(*   ). *)
